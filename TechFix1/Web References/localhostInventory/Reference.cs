//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TechFix1.localhostInventory {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ManageInventoryServiceSoap", Namespace="http://tempuri.org/")]
    public partial class ManageInventoryService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddInventoryItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateInventoryItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteInventoryItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllInventoryItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInventoryItemByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInventoryItemsByUserIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountantUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateQuotationRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQuotationRequestsByInventoryIDOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ManageInventoryService() {
            this.Url = global::TechFix1.Properties.Settings.Default.TechFix1_localhostInventory_ManageInventoryService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddInventoryItemCompletedEventHandler AddInventoryItemCompleted;
        
        /// <remarks/>
        public event UpdateInventoryItemCompletedEventHandler UpdateInventoryItemCompleted;
        
        /// <remarks/>
        public event DeleteInventoryItemCompletedEventHandler DeleteInventoryItemCompleted;
        
        /// <remarks/>
        public event GetAllInventoryItemsCompletedEventHandler GetAllInventoryItemsCompleted;
        
        /// <remarks/>
        public event GetInventoryItemByIdCompletedEventHandler GetInventoryItemByIdCompleted;
        
        /// <remarks/>
        public event GetInventoryItemsByUserIdCompletedEventHandler GetInventoryItemsByUserIdCompleted;
        
        /// <remarks/>
        public event GetAccountantUsersCompletedEventHandler GetAccountantUsersCompleted;
        
        /// <remarks/>
        public event CreateQuotationRequestCompletedEventHandler CreateQuotationRequestCompleted;
        
        /// <remarks/>
        public event GetQuotationRequestsByInventoryIDCompletedEventHandler GetQuotationRequestsByInventoryIDCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddInventoryItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddInventoryItem(int userID, string itemName, string brandNO, string serialNO, int quantity, decimal itemPrice) {
            object[] results = this.Invoke("AddInventoryItem", new object[] {
                        userID,
                        itemName,
                        brandNO,
                        serialNO,
                        quantity,
                        itemPrice});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddInventoryItemAsync(int userID, string itemName, string brandNO, string serialNO, int quantity, decimal itemPrice) {
            this.AddInventoryItemAsync(userID, itemName, brandNO, serialNO, quantity, itemPrice, null);
        }
        
        /// <remarks/>
        public void AddInventoryItemAsync(int userID, string itemName, string brandNO, string serialNO, int quantity, decimal itemPrice, object userState) {
            if ((this.AddInventoryItemOperationCompleted == null)) {
                this.AddInventoryItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddInventoryItemOperationCompleted);
            }
            this.InvokeAsync("AddInventoryItem", new object[] {
                        userID,
                        itemName,
                        brandNO,
                        serialNO,
                        quantity,
                        itemPrice}, this.AddInventoryItemOperationCompleted, userState);
        }
        
        private void OnAddInventoryItemOperationCompleted(object arg) {
            if ((this.AddInventoryItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddInventoryItemCompleted(this, new AddInventoryItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateInventoryItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateInventoryItem(int id, int userID, string itemName, string brandNO, string serialNO, int quantity, decimal itemPrice) {
            object[] results = this.Invoke("UpdateInventoryItem", new object[] {
                        id,
                        userID,
                        itemName,
                        brandNO,
                        serialNO,
                        quantity,
                        itemPrice});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateInventoryItemAsync(int id, int userID, string itemName, string brandNO, string serialNO, int quantity, decimal itemPrice) {
            this.UpdateInventoryItemAsync(id, userID, itemName, brandNO, serialNO, quantity, itemPrice, null);
        }
        
        /// <remarks/>
        public void UpdateInventoryItemAsync(int id, int userID, string itemName, string brandNO, string serialNO, int quantity, decimal itemPrice, object userState) {
            if ((this.UpdateInventoryItemOperationCompleted == null)) {
                this.UpdateInventoryItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateInventoryItemOperationCompleted);
            }
            this.InvokeAsync("UpdateInventoryItem", new object[] {
                        id,
                        userID,
                        itemName,
                        brandNO,
                        serialNO,
                        quantity,
                        itemPrice}, this.UpdateInventoryItemOperationCompleted, userState);
        }
        
        private void OnUpdateInventoryItemOperationCompleted(object arg) {
            if ((this.UpdateInventoryItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateInventoryItemCompleted(this, new UpdateInventoryItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteInventoryItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteInventoryItem(int id) {
            object[] results = this.Invoke("DeleteInventoryItem", new object[] {
                        id});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteInventoryItemAsync(int id) {
            this.DeleteInventoryItemAsync(id, null);
        }
        
        /// <remarks/>
        public void DeleteInventoryItemAsync(int id, object userState) {
            if ((this.DeleteInventoryItemOperationCompleted == null)) {
                this.DeleteInventoryItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteInventoryItemOperationCompleted);
            }
            this.InvokeAsync("DeleteInventoryItem", new object[] {
                        id}, this.DeleteInventoryItemOperationCompleted, userState);
        }
        
        private void OnDeleteInventoryItemOperationCompleted(object arg) {
            if ((this.DeleteInventoryItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteInventoryItemCompleted(this, new DeleteInventoryItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllInventoryItems", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllInventoryItems() {
            object[] results = this.Invoke("GetAllInventoryItems", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllInventoryItemsAsync() {
            this.GetAllInventoryItemsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllInventoryItemsAsync(object userState) {
            if ((this.GetAllInventoryItemsOperationCompleted == null)) {
                this.GetAllInventoryItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllInventoryItemsOperationCompleted);
            }
            this.InvokeAsync("GetAllInventoryItems", new object[0], this.GetAllInventoryItemsOperationCompleted, userState);
        }
        
        private void OnGetAllInventoryItemsOperationCompleted(object arg) {
            if ((this.GetAllInventoryItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllInventoryItemsCompleted(this, new GetAllInventoryItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInventoryItemById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetInventoryItemById(int id) {
            object[] results = this.Invoke("GetInventoryItemById", new object[] {
                        id});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetInventoryItemByIdAsync(int id) {
            this.GetInventoryItemByIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetInventoryItemByIdAsync(int id, object userState) {
            if ((this.GetInventoryItemByIdOperationCompleted == null)) {
                this.GetInventoryItemByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInventoryItemByIdOperationCompleted);
            }
            this.InvokeAsync("GetInventoryItemById", new object[] {
                        id}, this.GetInventoryItemByIdOperationCompleted, userState);
        }
        
        private void OnGetInventoryItemByIdOperationCompleted(object arg) {
            if ((this.GetInventoryItemByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInventoryItemByIdCompleted(this, new GetInventoryItemByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInventoryItemsByUserId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetInventoryItemsByUserId(int userId) {
            object[] results = this.Invoke("GetInventoryItemsByUserId", new object[] {
                        userId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetInventoryItemsByUserIdAsync(int userId) {
            this.GetInventoryItemsByUserIdAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetInventoryItemsByUserIdAsync(int userId, object userState) {
            if ((this.GetInventoryItemsByUserIdOperationCompleted == null)) {
                this.GetInventoryItemsByUserIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInventoryItemsByUserIdOperationCompleted);
            }
            this.InvokeAsync("GetInventoryItemsByUserId", new object[] {
                        userId}, this.GetInventoryItemsByUserIdOperationCompleted, userState);
        }
        
        private void OnGetInventoryItemsByUserIdOperationCompleted(object arg) {
            if ((this.GetInventoryItemsByUserIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInventoryItemsByUserIdCompleted(this, new GetInventoryItemsByUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountantUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAccountantUsers() {
            object[] results = this.Invoke("GetAccountantUsers", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountantUsersAsync() {
            this.GetAccountantUsersAsync(null);
        }
        
        /// <remarks/>
        public void GetAccountantUsersAsync(object userState) {
            if ((this.GetAccountantUsersOperationCompleted == null)) {
                this.GetAccountantUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountantUsersOperationCompleted);
            }
            this.InvokeAsync("GetAccountantUsers", new object[0], this.GetAccountantUsersOperationCompleted, userState);
        }
        
        private void OnGetAccountantUsersOperationCompleted(object arg) {
            if ((this.GetAccountantUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountantUsersCompleted(this, new GetAccountantUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateQuotationRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateQuotationRequest(string itemName, int quantity, string brandNo, string serialNo, int userId, int inventoryId) {
            object[] results = this.Invoke("CreateQuotationRequest", new object[] {
                        itemName,
                        quantity,
                        brandNo,
                        serialNo,
                        userId,
                        inventoryId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateQuotationRequestAsync(string itemName, int quantity, string brandNo, string serialNo, int userId, int inventoryId) {
            this.CreateQuotationRequestAsync(itemName, quantity, brandNo, serialNo, userId, inventoryId, null);
        }
        
        /// <remarks/>
        public void CreateQuotationRequestAsync(string itemName, int quantity, string brandNo, string serialNo, int userId, int inventoryId, object userState) {
            if ((this.CreateQuotationRequestOperationCompleted == null)) {
                this.CreateQuotationRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateQuotationRequestOperationCompleted);
            }
            this.InvokeAsync("CreateQuotationRequest", new object[] {
                        itemName,
                        quantity,
                        brandNo,
                        serialNo,
                        userId,
                        inventoryId}, this.CreateQuotationRequestOperationCompleted, userState);
        }
        
        private void OnCreateQuotationRequestOperationCompleted(object arg) {
            if ((this.CreateQuotationRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateQuotationRequestCompleted(this, new CreateQuotationRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQuotationRequestsByInventoryID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetQuotationRequestsByInventoryID(int inventoryID) {
            object[] results = this.Invoke("GetQuotationRequestsByInventoryID", new object[] {
                        inventoryID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetQuotationRequestsByInventoryIDAsync(int inventoryID) {
            this.GetQuotationRequestsByInventoryIDAsync(inventoryID, null);
        }
        
        /// <remarks/>
        public void GetQuotationRequestsByInventoryIDAsync(int inventoryID, object userState) {
            if ((this.GetQuotationRequestsByInventoryIDOperationCompleted == null)) {
                this.GetQuotationRequestsByInventoryIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuotationRequestsByInventoryIDOperationCompleted);
            }
            this.InvokeAsync("GetQuotationRequestsByInventoryID", new object[] {
                        inventoryID}, this.GetQuotationRequestsByInventoryIDOperationCompleted, userState);
        }
        
        private void OnGetQuotationRequestsByInventoryIDOperationCompleted(object arg) {
            if ((this.GetQuotationRequestsByInventoryIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuotationRequestsByInventoryIDCompleted(this, new GetQuotationRequestsByInventoryIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void AddInventoryItemCompletedEventHandler(object sender, AddInventoryItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddInventoryItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddInventoryItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UpdateInventoryItemCompletedEventHandler(object sender, UpdateInventoryItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateInventoryItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateInventoryItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DeleteInventoryItemCompletedEventHandler(object sender, DeleteInventoryItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteInventoryItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteInventoryItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetAllInventoryItemsCompletedEventHandler(object sender, GetAllInventoryItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllInventoryItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllInventoryItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetInventoryItemByIdCompletedEventHandler(object sender, GetInventoryItemByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInventoryItemByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInventoryItemByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetInventoryItemsByUserIdCompletedEventHandler(object sender, GetInventoryItemsByUserIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInventoryItemsByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInventoryItemsByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetAccountantUsersCompletedEventHandler(object sender, GetAccountantUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountantUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountantUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CreateQuotationRequestCompletedEventHandler(object sender, CreateQuotationRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateQuotationRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateQuotationRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetQuotationRequestsByInventoryIDCompletedEventHandler(object sender, GetQuotationRequestsByInventoryIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuotationRequestsByInventoryIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQuotationRequestsByInventoryIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591